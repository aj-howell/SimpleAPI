{"ast":null,"code":"var _class;\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class HttpInterceptorService {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(req, next) {\n    console.log('request intercepted');\n    const jwtToken = localStorage.getItem(\"token\");\n    const jwthelper = new JwtHelperService();\n    const isTokenExpired = jwthelper.isTokenExpired(jwtToken);\n    console.log(\"Is token expired: \", isTokenExpired);\n    if (isTokenExpired) {\n      this.router.navigate(['login']);\n      return false;\n    } else {\n      return true;\n    }\n    return next.handle(req);\n  }\n}\n_class = HttpInterceptorService;\n_class.ɵfac = function HttpInterceptorService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["JwtHelperService","HttpInterceptorService","constructor","router","intercept","req","next","console","log","jwtToken","localStorage","getItem","jwthelper","isTokenExpired","navigate","handle","i0","ɵɵinject","i1","Router","factory","ɵfac"],"sources":["C:\\Users\\anazj\\OneDrive\\Desktop\\simpleapi\\frontend\\angular\\src\\app\\services\\interceptor\\http-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs'; \nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class HttpInterceptorService implements HttpInterceptor {\n  \n\n  constructor(private router: Router){}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    console.log('request intercepted');\n    const jwtToken = localStorage.getItem(\"token\");\n    \n    const jwthelper = new JwtHelperService();\n    const isTokenExpired: boolean = jwthelper.isTokenExpired(jwtToken);\n    console.log(\"Is token expired: \", isTokenExpired);\n    \n    if (isTokenExpired) {\n        this.router.navigate(['login']);\n      return false;\n    } else {\n      return true;\n    }\n    \n    return next.handle(req);\n  }\n}\n"],"mappings":";AAGA,SAASA,gBAAgB,QAAQ,oBAAoB;;;AAIrD,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAU;EAEpCC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChDC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE9C,MAAMC,SAAS,GAAG,IAAIZ,gBAAgB,EAAE;IACxC,MAAMa,cAAc,GAAYD,SAAS,CAACC,cAAc,CAACJ,QAAQ,CAAC;IAClEF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,cAAc,CAAC;IAEjD,IAAIA,cAAc,EAAE;MAChB,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MACjC,OAAO,KAAK;KACb,MAAM;MACL,OAAO,IAAI;;IAGb,OAAOR,IAAI,CAACS,MAAM,CAACV,GAAG,CAAC;EACzB;;SArBWJ,sBAAsB;;mBAAtBA,MAAsB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;;SAAtBlB,MAAsB;EAAAmB,OAAA,EAAtBnB,MAAsB,CAAAoB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}