{"ast":null,"code":"var _class;\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AccessGuardService {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const jwtToken = localStorage.getItem(\"token\");\n    const jwthelper = new JwtHelperService();\n    const isTokenNotExpired = jwthelper.isTokenExpired(jwtToken);\n    console.log(\"this token is: \", isTokenNotExpired);\n    if (isTokenNotExpired) {\n      console.log(\"works\");\n      return true;\n    } else {\n      this.router.navigate(['login']);\n      return false;\n    }\n  }\n}\n_class = AccessGuardService;\n_class.ɵfac = function AccessGuardService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["JwtHelperService","AccessGuardService","constructor","router","canActivate","route","state","jwtToken","localStorage","getItem","jwthelper","isTokenNotExpired","isTokenExpired","console","log","navigate","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\anazj\\OneDrive\\Desktop\\simpleapi\\frontend\\angular\\src\\app\\services\\guard\\access-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateFn, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccessGuardService implements  CanActivate{\n  \n  constructor(private router:Router)\n  {\n\n  }\n\n  \n  canActivate(\n    route: ActivatedRouteSnapshot, \n    state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> \n    {\n      const jwtToken=localStorage.getItem(\"token\");\n    \n        const jwthelper = new JwtHelperService();\n        const isTokenNotExpired: boolean = jwthelper.isTokenExpired(jwtToken)\n        console.log(\"this token is: \",isTokenNotExpired);\n        if(isTokenNotExpired)\n        {\n          console.log(\"works\");\n          return true;\n        }\n      \n        else{\n        this.router.navigate(['login']);\n        return false;\n        }\n        \n    }\n}\n"],"mappings":";AAGA,SAASA,gBAAgB,QAAQ,oBAAoB;;;AAKrD,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,MAAa;IAAb,KAAAA,MAAM,GAANA,MAAM;EAG1B;EAGAC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAExB,MAAMC,QAAQ,GAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE1C,MAAMC,SAAS,GAAG,IAAIV,gBAAgB,EAAE;IACxC,MAAMW,iBAAiB,GAAYD,SAAS,CAACE,cAAc,CAACL,QAAQ,CAAC;IACrEM,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAACH,iBAAiB,CAAC;IAChD,IAAGA,iBAAiB,EACpB;MACEE,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpB,OAAO,IAAI;KACZ,MAEG;MACJ,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;;EAGhB;;SA5BSd,kBAAkB;;mBAAlBA,MAAkB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;;SAAlBlB,MAAkB;EAAAmB,OAAA,EAAlBnB,MAAkB,CAAAoB,IAAA;EAAAC,UAAA,EAFjB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}