{"ast":null,"code":"var _class;\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AccessGuardService {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const jwtToken = localStorage.getItem(\"token\");\n    const jwthelper = new JwtHelperService();\n    const isTokenExpired = jwthelper.isTokenExpired(jwtToken);\n    console.log(\"Is token expired: \", isTokenExpired);\n    if (isTokenExpired) {\n      this.router.navigate(['login']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n_class = AccessGuardService;\n_class.ɵfac = function AccessGuardService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["JwtHelperService","AccessGuardService","constructor","router","canActivate","route","state","jwtToken","localStorage","getItem","jwthelper","isTokenExpired","console","log","navigate","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\anazj\\OneDrive\\Desktop\\simpleapi\\frontend\\angular\\src\\app\\services\\guard\\access-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccessGuardService implements CanActivate {\n  \n  constructor(private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot, \n    state: RouterStateSnapshot\n  ): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n    const jwtToken = localStorage.getItem(\"token\");\n    \n    const jwthelper = new JwtHelperService();\n    const isTokenExpired: boolean = jwthelper.isTokenExpired(jwtToken);\n    console.log(\"Is token expired: \", isTokenExpired);\n    \n    if (isTokenExpired) {\n        this.router.navigate(['login']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n"],"mappings":";AAGA,SAASA,gBAAgB,QAAQ,oBAAoB;;;AAKrD,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE9C,MAAMC,SAAS,GAAG,IAAIV,gBAAgB,EAAE;IACxC,MAAMW,cAAc,GAAYD,SAAS,CAACC,cAAc,CAACJ,QAAQ,CAAC;IAClEK,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,cAAc,CAAC;IAEjD,IAAIA,cAAc,EAAE;MAChB,IAAI,CAACR,MAAM,CAACW,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MACjC,OAAO,KAAK;KACb,MAAM;MACL,OAAO,IAAI;;EAEf;;SApBWb,kBAAkB;;mBAAlBA,MAAkB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;;SAAlBjB,MAAkB;EAAAkB,OAAA,EAAlBlB,MAAkB,CAAAmB,IAAA;EAAAC,UAAA,EAFjB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}