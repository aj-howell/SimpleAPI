{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AccessGuardService {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    // const jwtToken: string | null =localStorage.getItem(\"token\");\n    // if(jwtToken)\n    // {\n    //   const jwthelper = new JwtHelperService();\n    //   const isTokenNonExpired: Boolean = jwthelper.isTokenExpired(jwtToken)\n    //   if(isTokenNonExpired)\n    //   {\n    //     return true;\n    //   }\n    // }\n    // else\n    // {\n    //   this.router.navigate([\"login\"]);\n    //   return false;\n    // }\n    //   return true;\n    return true;\n  }\n}\n_class = AccessGuardService;\n_class.ɵfac = function AccessGuardService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AccessGuardService","constructor","router","canActivate","route","state","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\anazj\\OneDrive\\Desktop\\simpleapi\\frontend\\angular\\src\\app\\services\\guard\\access-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccessGuardService implements CanActivate{\n  \n  constructor(private router:Router)\n  {\n\n  }\n  \n  canActivate(\n    route: ActivatedRouteSnapshot, \n    state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> \n    {\n      // const jwtToken: string | null =localStorage.getItem(\"token\");\n      // if(jwtToken)\n      // {\n      //   const jwthelper = new JwtHelperService();\n      //   const isTokenNonExpired: Boolean = jwthelper.isTokenExpired(jwtToken)\n      //   if(isTokenNonExpired)\n      //   {\n      //     return true;\n      //   }\n      // }\n      // else\n      // {\n      //   this.router.navigate([\"login\"]);\n      //   return false;\n      // }\n      //   return true;\n      return true\n    }\n}\n"],"mappings":";;;AAQA,OAAM,MAAOA,kBAAkB;EAE7BC,YAAoBC,MAAa;IAAb,KAAAA,MAAM,GAANA,MAAM;EAG1B;EAEAC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAExB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAO,IAAI;EACb;;SA5BSL,kBAAkB;;mBAAlBA,MAAkB,EAAAM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;;SAAlBT,MAAkB;EAAAU,OAAA,EAAlBV,MAAkB,CAAAW,IAAA;EAAAC,UAAA,EAFjB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}